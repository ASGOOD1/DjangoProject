"feat: homepage scaffolding, article UX fields, template inheritance fix, and dev config

Context / What changed
- Goal: move toward a sport.ro-style home: featured (hero) article + latest grid, keep existing /<category>/<slug>.html detail URLs, and make the admin usable for content entry.
- Fixed template inheritance errors (TemplateDoesNotExist) caused by extending the wrong base file path.
- Added missing dev config for templates/static/media so local work is smooth.

Changes by file
1) DjangoProject/settings.py
   - TEMPLATES[0]['DIRS'] = [BASE_DIR / 'templates'] to support a shared top-level templates directory (not strictly required today, but enabled for future).
   - STATICFILES_DIRS = [BASE_DIR / 'static'] so we can drop a favicon/CSS/JS in dev without collectstatic.
   - MEDIA_URL='media/' and MEDIA_ROOT=BASE_DIR/'media' for image uploads later.

2) DjangoProject/urls.py
   - Added static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) when DEBUG=True so uploaded files resolve locally.

3) ArticleWeaver/models.py
   - Extended Article model with UX fields needed by the homepage:
     • summary (TextField) – short teaser used on cards and hero.
     • status (choices: draft/pub) – only 'pub' is rendered publicly.
     • is_featured (BooleanField) – the hero article on the homepage.
     • updated_at (DateTimeField auto_now=True) – useful metadata.
   - Kept existing fields and slugify logic intact; no change to category/slug URL scheme.

4) ArticleWeaver/migrations/0003_article_is_featured_article_status_article_summary_and_more.py
   - New migration generated by makemigrations and applied with migrate.
   - Adds the fields listed above and alters category as per migration.

5) ArticleWeaver/admin.py
   - Improved admin usability:
     • list_display=('title','category','status','is_featured','published_at')
     • list_filter=('category','status','is_featured','published_at')
     • search_fields=('title','summary','content')
     • prepopulated_fields={'slug':('title',)} for convenience.
   - Makes it trivial to mark one article featured and publish content.

6) ArticleWeaver/views.py
   - article_list(): now acts as a homepage-style list.
     • Picks latest is_featured=True & status='pub' as hero (optional).
     • Lists remaining status='pub' articles ordered by -published_at.
     • Paginates the rest (9 per page).
   - article_detail(): now requires status='pub' in addition to category+slug for safety (drafts won’t leak).
   - NOTE: URL scheme is unchanged; list remains at '/', details remain at '/<category>/<slug>.html'.

7) ArticleWeaver/templates/articles/base.html  (NEW)
   - Introduced a simple Bootstrap layout (navbar + container) used by both list and detail pages.
   - Lives inside the app at ArticleWeaver/templates/articles/base.html.
     • We also enabled a top-level templates dir in settings for future shared layouts, but we intentionally kept base.html inside the app for now to avoid moving folders today.

8) ArticleWeaver/templates/articles/article_list.html
   - Now extends 'articles/base.html' (correct path).
   - Renders optional HERO block when a featured published article exists.
   - Renders a 3-wide grid of latest articles with summary, image, date.
   - Adds pagination controls.

9) ArticleWeaver/templates/articles/article_detail.html
   - Now extends 'articles/base.html' (fixed from the incorrect 'articles/base.html.html').
   - Renders title, meta (date + category), main image (if any), and content.

Behavior / How to test locally
- Start: python manage.py runserver
- Admin: /admin (create superuser if needed)
  • Create several Article rows; set status='pub'.
  • Set exactly ONE article to is_featured=True for the hero.
  • Provide image_url and summary for nicer cards.
- Visit '/': hero appears (if any), followed by latest grid with pagination.
- Visit '/<category>/<slug>.html': detail still works, now inherits base layout.

URLs (unchanged)
- List (home): '/'
- Detail: '/<str:category>/<slug:slug>.html'
- Admin: '/admin/'

Notes / Known limitations
- Slug collision handling remains simple (relies on unique constraint + manual edit if duplicate titles).
- We are still using SQLite locally; Oracle connection not wired yet.
- The enabled top-level templates dir is unused today (we kept base.html app-local), but it’s ready for future shared layouts.